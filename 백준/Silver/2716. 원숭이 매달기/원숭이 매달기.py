'''
백준 2716 원숭이 매달기

나무 꼭대기에 원숭이가 조심스럽게 올라가는 길을 찾아야한다.
부서지기 쉬운 덩굴이 있는데 시소 원리와 비슷하다.
덩굴의 무게가 불균형 하면 끊어지며 땅으로 떨어진다.
균형을 유지하면 꼭대기에 도달 할 수 있다

덩굴의 균형을 유지하며 꼭대기에 도달할 수 있는 최소 원숭이 수를 알고 싶다.


입력
테스크 케이스 개수 N
각 케이스는 한줄로 덩굴의 구조를 꺾쇠 괄호로 표현한 문자열이 주어진다

출력
최소 원숭이 수 출력

[] 한 번 갈라지는 트리가 있다면 반드시 왼쪽과 오른쪽 같은 마리수가 존재해야한다.
따라서 원숭이의 총합은 반드시 2의 배수
트리의 깊이를 알기만 하면 된다.
'''
# 테스트 케이스
N = int(input())

for _ in range(N):
    # 덩굴
    arr = input()
    # 트리 최대 깊이
    depth = 0
    # 현재 트리
    tree = list()
    
    # 덩굴 순회
    for i in arr:
        # ] 이면 현재 스택의 길이를 깊이와 비교 최대값 저장, 트리 팝
        if i ==']':
            depth = max(len(tree), depth)
            tree.pop()
        # [ 이면 [ 추가
        else:
            tree.append('[')
    
    # 답은 깊이의 2배
    ans = 2**depth
    
    print(ans)
